generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  NOK
  USD
  EUR
}

model User {
  id              String        @id @default(uuid())
  name            String
  email           String        @unique
  password        String?
  image           String?
  emailVerified   DateTime?
  goals           Goal[]
  bankAccounts    BankAccount[]
  rewards         Reward[]
  transactions    Transaction[]   @relation("UserTransactions")
  sessions        Session[]
  accounts        Account[]       // Auth.js accounts
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Goal {
  id            String   @id @default(uuid())
  title         String
  targetAmount  Float
  currentAmount Float     @default(0)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model BankAccount {
  id             String        @id @default(uuid())
  accountNumber  String
  accountType    String
  balance        Float
  currency       Currency
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  transactions   Transaction[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([userId])
}

model Transaction {
  id          String    @id @default(uuid())
  date        DateTime
  description String
  amount      Float
  currency    Currency
  accountId   String
  account     BankAccount @relation(fields: [accountId], references: [id])
  userId      String
  user        User      @relation("UserTransactions", fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([accountId])
  @@index([userId])
}

model Reward {
  id        String   @id @default(uuid())
  title     String
  unlocked  Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// Auth.js-compliant model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
